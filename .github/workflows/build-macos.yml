name: Build macOS App

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python (with distutils)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Python build dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -c "import distutils; print('✅ Python distutils available')"

    - name: Setup build environment
      run: |
        # Ensure Xcode command line tools are available
        xcode-select --install 2>/dev/null || echo "Xcode tools already installed"

        # Set environment variables for native compilation
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        echo "PYTHON=$(which python)" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        # Install dependencies without rebuilding
        npm ci --ignore-scripts

    - name: Install native modules with prebuilt binaries
      run: |
        echo "📦 Installing native modules with prebuilt binaries..."

        # Force install prebuilt binaries for better-sqlite3
        npm install better-sqlite3 --build-from-source=false --fallback-to-build=false || {
          echo "⚠️ Prebuilt better-sqlite3 failed, trying alternative version..."
          npm install better-sqlite3@^11.0.0 --build-from-source=false
        }

        # Force install prebuilt binaries for bcrypt
        npm install bcrypt --build-from-source=false --fallback-to-build=false || {
          echo "⚠️ Prebuilt bcrypt failed, trying alternative version..."
          npm install bcrypt@^5.1.0 --build-from-source=false
        }

        echo "✅ Native modules installed"
        
    - name: Build CSS
      run: |
        npm run build-css
        
    - name: Create clean database
      run: |
        # Vérifier que la base de données vierge existe
        if [ -f "database/main-clean.db" ]; then
          echo "✅ Base de données vierge trouvée"
        else
          echo "⚠️ Création d'une base de données vierge"
          mkdir -p database
          touch database/main-clean.db
        fi
        
    - name: Build macOS app
      run: |
        echo "🚀 Building macOS application..."
        npm run build:mac || {
          echo "⚠️ Build failed, trying alternative approach..."

          # Alternative 1: Try with different electron-builder config
          npm run build-css
          npx electron-builder --mac --publish=never --config.asar=false || {

            echo "⚠️ Alternative 1 failed, trying minimal build without native modules..."
            # Alternative 2: Use simplified package.json without native dependencies
            cp package-macos.json package.json
            rm -rf node_modules
            npm install --production --ignore-scripts

            # Try to build with minimal setup
            npx electron-builder --mac --publish=never --config.asar=false
          }
        }
        
    - name: List build output
      run: |
        echo "📁 Contenu du dossier dist:"
        ls -la dist/ || echo "Pas de dossier dist"
        echo ""
        echo "📁 Recherche des fichiers .app:"
        find . -name "*.app" -type d || echo "Aucun .app trouvé"
        
    - name: Upload macOS App
      uses: actions/upload-artifact@v4
      with:
        name: GestionPro-macOS-${{ github.sha }}
        path: |
          dist/mac/
          dist/*.app
        retention-days: 30
        
    - name: Create Release Info
      run: |
        echo "# 🍎 GestionPro pour macOS" > RELEASE_INFO.md
        echo "" >> RELEASE_INFO.md
        echo "## 📦 Installation" >> RELEASE_INFO.md
        echo "1. Téléchargez l'archive ci-dessous" >> RELEASE_INFO.md
        echo "2. Décompressez-la" >> RELEASE_INFO.md
        echo "3. Glissez GestionPro.app vers Applications" >> RELEASE_INFO.md
        echo "4. Double-cliquez pour lancer" >> RELEASE_INFO.md
        echo "" >> RELEASE_INFO.md
        echo "## 🔑 Connexion initiale" >> RELEASE_INFO.md
        echo "- **Utilisateur:** proprietaire" >> RELEASE_INFO.md
        echo "- **Mot de passe:** admin" >> RELEASE_INFO.md
        echo "" >> RELEASE_INFO.md
        echo "## ⚠️ Sécurité macOS" >> RELEASE_INFO.md
        echo "Si macOS bloque l'app:" >> RELEASE_INFO.md
        echo "1. Allez dans Préférences Système > Sécurité" >> RELEASE_INFO.md
        echo "2. Cliquez 'Ouvrir quand même' pour GestionPro" >> RELEASE_INFO.md
        echo "" >> RELEASE_INFO.md
        echo "**Version:** $(node -p "require('./package.json').version")" >> RELEASE_INFO.md
        echo "**Build:** ${{ github.sha }}" >> RELEASE_INFO.md
        
    - name: Upload Release Info
      uses: actions/upload-artifact@v4
      with:
        name: Release-Info-${{ github.sha }}
        path: RELEASE_INFO.md
        retention-days: 30
